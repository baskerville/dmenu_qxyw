diff -u _dmenu/dmenu.1 dmenu/dmenu.1
--- _dmenu/dmenu.1	2012-01-10 16:15:59.164014031 +0100
+++ dmenu/dmenu.1	2012-01-08 20:39:45.814995835 +0100
@@ -39,6 +39,9 @@
 .B \-b
 dmenu appears at the bottom of the screen.
 .TP
+.B \-q
+dmenu will not show any items if the search string is empty.
+.TP
 .B \-f
 dmenu grabs the keyboard before reading stdin.  This is faster, but will lock up
 X until stdin reaches end\-of\-file.
@@ -55,6 +58,15 @@
 .BI \-fn " font"
 defines the font or font set used.
 .TP
+.BI \-x " xoffset"
+defines the offset from the left border of the screen.
+.TP
+.BI \-y " yoffset"
+defines the offset from the top border of the screen.
+.TP
+.BI \-w " width"
+defines the desired menu window width.
+.TP
 .BI \-nb " color"
 defines the normal background color.
 .IR #RGB ,
diff -u _dmenu/dmenu.c dmenu/dmenu.c
--- _dmenu/dmenu.c	2012-01-10 16:15:59.164014031 +0100
+++ dmenu/dmenu.c	2012-01-08 21:18:29.035935238 +0100
@@ -50,10 +50,14 @@
 static const char *selbgcolor  = "#005577";
 static const char *selfgcolor  = "#eeeeee";
 static unsigned int lines = 0;
+static int xoffset = 0;
+static int yoffset = 0;
+static int width = 0;
 static unsigned long normcol[ColLast];
 static unsigned long selcol[ColLast];
 static Atom clip, utf8;
 static Bool topbar = True;
+static Bool quiet = False;
 static DC *dc;
 static Item *items = NULL;
 static Item *matches, *matchend;
@@ -77,6 +81,8 @@
 		}
 		else if(!strcmp(argv[i], "-b"))   /* appears at the bottom of the screen */
 			topbar = False;
+ 		else if(!strcmp(argv[i], "-q"))
+ 			quiet = True;
 		else if(!strcmp(argv[i], "-f"))   /* grabs keyboard before reading stdin */
 			fast = True;
 		else if(!strcmp(argv[i], "-i")) { /* case-insensitive item matching */
@@ -86,6 +92,12 @@
 		else if(i+1 == argc)
 			usage();
 		/* these options take one argument */
+ 		else if(!strcmp(argv[i], "-x"))
+ 			xoffset = atoi(argv[++i]);
+ 		else if(!strcmp(argv[i], "-y"))
+ 			yoffset = atoi(argv[++i]);
+ 		else if(!strcmp(argv[i], "-w"))
+ 			width = atoi(argv[++i]);
 		else if(!strcmp(argv[i], "-l"))   /* number of lines in vertical list */
 			lines = atoi(argv[++i]);
 		else if(!strcmp(argv[i], "-p"))   /* adds prompt to left of input field */
@@ -180,30 +192,32 @@
 	if((curpos = textnw(dc, text, cursor) + dc->h/2 - 2) < dc->w)
 		drawrect(dc, curpos, 2, 1, dc->h - 4, True, FG(dc, normcol));
 
-	if(lines > 0) {
-		/* draw vertical list */
-		dc->w = mw - dc->x;
-		for(item = curr; item != next; item = item->right) {
-			dc->y += dc->h;
-			drawtext(dc, item->text, (item == sel) ? selcol : normcol);
-		}
-	}
-	else if(matches) {
-		/* draw horizontal list */
-		dc->x += inputw;
-		dc->w = textw(dc, "<");
-		if(curr->left)
-			drawtext(dc, "<", normcol);
-		for(item = curr; item != next; item = item->right) {
-			dc->x += dc->w;
-			dc->w = MIN(textw(dc, item->text), mw - dc->x - textw(dc, ">"));
-			drawtext(dc, item->text, (item == sel) ? selcol : normcol);
-		}
-		dc->w = textw(dc, ">");
-		dc->x = mw - dc->w;
-		if(next)
-			drawtext(dc, ">", normcol);
-	}
+    if(!quiet || strlen(text) > 0) {    
+        if(lines > 0) {
+            /* draw vertical list */
+            dc->w = mw - dc->x;
+            for(item = curr; item != next; item = item->right) {
+                dc->y += dc->h;
+                drawtext(dc, item->text, (item == sel) ? selcol : normcol);
+            }
+        }
+        else if(matches) {
+            /* draw horizontal list */
+            dc->x += inputw;
+            dc->w = textw(dc, "<");
+            if(curr->left)
+                drawtext(dc, "<", normcol);
+            for(item = curr; item != next; item = item->right) {
+                dc->x += dc->w;
+                dc->w = MIN(textw(dc, item->text), mw - dc->x - textw(dc, ">"));
+                drawtext(dc, item->text, (item == sel) ? selcol : normcol);
+            }
+            dc->w = textw(dc, ">");
+            dc->x = mw - dc->w;
+            if(next)
+                drawtext(dc, ">", normcol);
+        }
+    }
 	mapdc(dc, win, mw, mh);
 }
 
@@ -268,7 +282,7 @@
 		case XK_w: /* delete word */
 			while(cursor > 0 && text[nextrune(-1)] == ' ')
 				insert(NULL, nextrune(-1) - cursor);
-			while(cursor > 0 && text[nextrune(-1)] != ' ')
+			while(cursor > 0 && text[nextrune(-1)] != ' ' && text[nextrune(-1)] != '/')
 				insert(NULL, nextrune(-1) - cursor);
 			break;
 		case XK_y: /* paste selection */
@@ -333,7 +347,7 @@
 	case XK_Left:
 		if(cursor > 0 && (!sel || !sel->left || lines > 0)) {
 			cursor = nextrune(-1);
-			break;
+            break;
 		}
 		if(lines > 0)
 			return;
@@ -363,7 +377,7 @@
 	case XK_Right:
 		if(text[cursor] != '\0') {
 			cursor = nextrune(+1);
-			break;
+            break;
 		}
 		if(lines > 0)
 			return;
@@ -565,7 +579,7 @@
 					break;
 
 		x = info[i].x_org;
-		y = info[i].y_org + (topbar ? 0 : info[i].height - mh);
+		y = info[i].y_org + (topbar ? yoffset : info[i].height - mh - yoffset);
 		mw = info[i].width;
 		XFree(info);
 	}
@@ -573,9 +587,13 @@
 #endif
 	{
 		x = 0;
-		y = topbar ? 0 : DisplayHeight(dc->dpy, screen) - mh;
+		y = topbar ? yoffset : DisplayHeight(dc->dpy, screen) - mh - yoffset;
 		mw = DisplayWidth(dc->dpy, screen);
 	}
+
+    x += xoffset;
+    mw = width ? width : mw;
+
 	promptw = prompt ? textw(dc, prompt) : 0;
 	inputw = MIN(inputw, mw/3);
 	match();
@@ -601,7 +619,8 @@
 
 void
 usage(void) {
-	fputs("usage: dmenu [-b] [-f] [-i] [-l lines] [-p prompt] [-fn font]\n"
+	fputs("usage: dmenu [-b] [-q] [-f] [-i] [-l lines] [-p prompt] [-fn font]\n"
+	      "             [-x xoffset] [-y yoffset] [-w width]\n"
 	      "             [-nb color] [-nf color] [-sb color] [-sf color] [-v]\n", stderr);
 	exit(EXIT_FAILURE);
 }
